;;; custom-dark-theme.el
;;; Created with ThemeCreator, https://github.com/mswift42/themecreator.

(deftheme custom-dark)
(let ((class '((class color) (min-colors 89)))
      (fg1 "#f8f8f8")
      (fg2 "#e4e4e4")
      (fg3 "#d0d0d0")
      (fg4 "#bcbcbc")
      (fg5 "#ffffff")
      (fg6 "#000000")
      (bg1 "#2c303c")
      (bg2 "#3b4252")
      (bg3 "#434c5e")
      (bg4 "#4c566a")
      (builtin   "#90788c")
      (keyword   "#c3a287")
      (const     "#f8f8f8")
      (comment   "#666c80")
      (func      "#f8f8f8")
      (str       "#ffebb5")
      (type      "#8787d7")
      (var       "#f8f8f8")
      (tag       "#4fc1e9")
      (header    "#202328")
      (fringe    "#2c303c")
      (border    "#272b36")
      (match     "#484b5a")
      (highlight "#3d4148")
      (tooltip   "#1d2026")
      (cursor    "#ffffff")
      (success   "#66a9d4")
      (success2  "#336633")
      (info      "#639743")
      (info2     "#387c98")
      (error     "#bf616a")
      (error2    "#663333")
      (warning   "#ffff00")
      (warning2  "#eeb4b4"))
     (custom-theme-set-faces 'custom-dark
      `(default ((,class (:background ,bg1 :foreground ,fg1))))
      `(font-lock-builtin-face ((,class (:foreground ,builtin))))
      `(font-lock-comment-face ((,class (:foreground ,comment))))
      `(font-lock-negation-char-face ((,class (:foreground ,const))))
      `(font-lock-reference-face ((,class (:foreground ,const))))
      `(font-lock-constant-face ((,class (:foreground ,const))))
      `(font-lock-doc-face ((,class (:foreground ,comment))))
      `(font-lock-function-name-face ((,class (:foreground ,func))))
      `(font-lock-keyword-face ((,class (:foreground ,keyword))))
      `(font-lock-string-face ((,class (:foreground ,str))))
      `(font-lock-type-face ((,class (:foreground ,type))))
      `(font-lock-variable-name-face ((,class (:foreground ,var))))
      `(font-lock-match-face ((,class (:foreground ,var :background ,success))))
      `(font-lock-warning-face ((,class (:foreground ,error :background ,bg1))))
      `(error ((,class (:foreground ,error))))
      `(warning ((,class (:foreground ,warning))))
      `(success ((,class (:foreground ,info))))
      `(match ((,class (:foreground ,fg1 :background ,match))))
      `(region ((,class (:foreground ,fg1 :background ,match))))
      `(highlight ((,class (:foreground ,fg1 :background ,highlight))))
      `(hl-line ((,class (:foreground ,fg1 :background ,bg3))))
      `(linum ((,class (:foreground ,bg4 :background ,bg1))))
      `(fringe ((,class (:foreground ,fringe :background ,fringe))))
      `(header-line ((,class (:background ,header))))
      `(cursor ((,class (:background ,cursor))))
      `(show-paren-match-face ((,class (:foreground ,fg1 :background ,info2))))
      `(show-paren-mismatch-face ((,class (:foreground ,fg1 :background ,error))))
      `(isearch ((,class (:bold nil :foreground ,fg6 :background ,success))))
      `(mode-line ((,class (:box nil :bold nil :foreground ,fg2 :background ,bg2))))
      `(mode-line-inactive ((,class (:background ,bg2))))
      `(mode-line-buffer-id ((,class (:bold nil :foreground ,func :background nil))))
      `(powerline-active1 ((,class (:background ,bg2))))
      `(powerline-active2 ((,class (:background ,bg2))))
      `(powerline-inactive1 ((,class (:background ,bg2))))
      `(powerline-inactive2 ((,class (:background ,bg2))))
      `(mode-line-highlight ((,class (:foreground ,keyword :box nil))))
      `(mode-line-emphasis ((,class (:foreground ,fg1))))
      `(spaceline-evil-insert ((,class (:foreground ,fg1 :background "#7eaefd"))))
      `(spaceline-evil-normal ((,class (:foreground ,fg1 :background "#4f3598"))))
      `(spaceline-evil-replace ((,class (:foreground ,fg1 :background "#005154"))))
      `(spaceline-evil-visual ((,class (:foreground ,fg1 :background "#e6987a"))))
      `(spaceline-evil-emacs ((,class (:foreground ,fg1 :background ,bg2))))
      `(spaceline-flycheck-error ((,class (:foreground ,error))))
      `(spaceline-flycheck-warning ((,class (:foreground ,warning))))
      `(spaceline-flycheck-info ((,class (:foreground ,info))))
      `(vertical-border ((,class (:foreground ,border))))
      `(minibuffer-prompt ((,class (:bold t :foreground ,keyword))))
      `(default-italic ((,class (:italic t))))
      `(link ((,class (:foreground ,const :underline t))))
      `(evil-ex-info ((,class (:foreground ,warning))))
      `(evil-ex-substitute-replacement ((,class (:foreground ,warning))))
      `(hydra-face-red ((,class (:foreground ,warning))))
      `(org-level-1 ((,class (:foreground ,keyword :height 1.2 :bold t))))
      `(org-level-2 ((,class (:foreground ,success :height 1.1))))
      `(org-level-3 ((,class (:foreground ,type    :height 1.05))))
      `(org-level-4 ((,class (:foreground ,fg1))))
      `(org-level-5 ((,class (:foreground ,fg1))))
      `(org-level-6 ((,class (:foreground ,fg1))))
      `(org-code ((,class (:foreground ,fg2))))
      `(org-hide ((,class (:foreground ,fg4))))
      `(org-date ((,class (:underline t :foreground ,var) )))
      `(org-footnote  ((,class (:underline t :foreground ,fg4))))
      `(org-document-info-keyword ((,class (:foreground ,builtin))))
      `(org-document-info ((,class (:foreground ,fg1))))
      `(org-document-title ((,class (:foreground ,fg1))))
      `(org-link ((,class (:underline t :foreground ,tag))))
      `(org-special-keyword ((,class (:foreground ,builtin))))
      `(org-block ((,class (:foreground ,fg3))))
      `(org-quote ((,class (:inherit org-block :slant italic))))
      `(org-verse ((,class (:inherit org-block :slant italic))))
      `(org-todo ((,class (:foreground ,warning))))
      `(org-done ((,class (:foreground ,info))))
      `(org-warning ((,class (:underline t :foreground ,error))))
      `(org-agenda-structure ((,class (:weight bold :foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
      `(org-agenda-date ((,class (:foreground ,var :height 1.1 ))))
      `(org-agenda-date-weekend ((,class (:weight normal :foreground ,fg4))))
      `(org-agenda-date-today ((,class (:weight bold :foreground ,keyword :height 1.4))))
      `(org-agenda-done ((,class (:foreground ,bg4))))
      `(org-scheduled ((,class (:foreground ,type))))
      `(org-scheduled-today ((,class (:foreground ,func :weight bold :height 1.2))))
      `(org-ellipsis ((,class (:foreground ,builtin))))
      `(org-verbatim ((,class (:foreground ,fg4))))
      `(org-document-info-keyword ((,class (:foreground ,func))))
      `(org-sexp-date ((,class (:foreground ,fg4))))
      `(markdown-link-face ((,class (:foreground ,tag))))
      `(which-key-key-face ((,class (:foreground ,fg1))))
      `(which-key-special-key-face ((,class (:foreground ,fg1 :underline t))))
      `(which-key-separator-face ((,class (:foreground ,type))))
      `(font-latex-bold-face ((,class (:foreground ,type))))
      `(font-latex-italic-face ((,class (:foreground ,var :italic t))))
      `(font-latex-string-face ((,class (:foreground ,str))))
      `(font-latex-match-reference-keywords ((,class (:foreground ,const))))
      `(font-latex-match-variable-keywords ((,class (:foreground ,var))))
      `(ido-only-match ((,class (:foreground ,success))))
      `(ido-first-match ((,class (:foreground ,keyword :bold t))))
      `(ido-subdir ((,class (:foreground ,builtin))))
      `(ido-vertical-first-match-face ((,class (:background nil :foreground ,success))))
      `(ido-vertical-only-match-face ((,class (:background nil :foreground ,success))))
      `(ido-vertical-match-face ((,class (:foreground ,success))))
      `(gnus-header-content ((,class (:foreground ,keyword))))
      `(gnus-header-from ((,class (:foreground ,var))))
      `(gnus-header-name ((,class (:foreground ,type))))
      `(gnus-header-subject ((,class (:foreground ,func :bold t))))
      `(mu4e-view-url-number-face ((,class (:foreground ,type))))
      `(mu4e-cited-1-face ((,class (:foreground ,fg2))))
      `(mu4e-cited-7-face ((,class (:foreground ,fg3))))
      `(mu4e-header-marks-face ((,class (:foreground ,type))))
      `(ffap ((,class (:foreground ,fg4))))
      `(ac-completion-face ((,class (:underline t :foreground ,keyword))))
      `(info-quoted-name ((,class (:foreground ,builtin))))
      `(info-string ((,class (:foreground ,str))))
      `(icompletep-determined ((,class :foreground ,builtin)))
      `(undo-tree-visualizer-current-face ((,class :foreground ,builtin)))
      `(undo-tree-visualizer-default-face ((,class :foreground ,fg2)))
      `(undo-tree-visualizer-unmodified-face ((,class :foreground ,var)))
      `(undo-tree-visualizer-register-face ((,class :foreground ,type)))
      `(slime-repl-inputed-output-face ((,class (:foreground ,type))))
      `(trailing-whitespace ((,class (:foreground nil :background ,error))))
      `(neo-banner-face ((,class (:foregorund ,info))))
      `(neo-header-face ((,class (:foreground ,fg4))))
      `(neo-root-dir-face ((,class (:foreground ,tag))))
      `(neo-dir-link-face ((,class (:foreground ,builtin))))
      `(neo-expand-btn-face ((,class (:foreground ,fg5 :bold t))))
      `(rainbow-delimiters-depth-1-face ((,class :foreground ,fg1)))
      `(rainbow-delimiters-depth-2-face ((,class :foreground ,type)))
      `(rainbow-delimiters-depth-3-face ((,class :foreground ,var)))
      `(rainbow-delimiters-depth-4-face ((,class :foreground ,const)))
      `(rainbow-delimiters-depth-5-face ((,class :foreground ,keyword)))
      `(rainbow-delimiters-depth-6-face ((,class :foreground ,fg1)))
      `(rainbow-delimiters-depth-7-face ((,class :foreground ,type)))
      `(rainbow-delimiters-depth-8-face ((,class :foreground ,var)))
      `(magit-item-highlight ((,class :background ,bg3)))
      `(magit-section-heading        ((,class (:foreground ,keyword :weight bold))))
      `(magit-hunk-heading           ((,class (:background ,bg3))))
      `(magit-section-highlight      ((,class (:background ,bg2))))
      `(magit-hunk-heading-highlight ((,class (:background ,bg3))))
      `(magit-diff-context-highlight ((,class (:background ,bg3 :foreground ,fg3))))
      `(magit-diff-file-heading ((,class (:foreground ,fg1))))
      `(magit-diff-file-header ((,class (:foreground ,fg2 :background ,bg3))))
      `(magit-diffstat-added   ((,class (:foreground ,type))))
      `(magit-diffstat-removed ((,class (:foreground ,var))))
      `(magit-process-ok ((,class (:foreground ,func :weight bold))))
      `(magit-process-ng ((,class (:foreground ,error :weight bold))))
      `(magit-branch ((,class (:foreground ,const :weight bold))))
      `(magit-log-author ((,class (:foreground ,fg3))))
      `(magit-hash ((,class (:foreground ,fg2))))
      `(magit-sequence-head ((,class (:foregrounf ,fg1))))
      `(magit-sequence-stop ((,class (:foregrounf ,fg1))))
      `(nxml-element-local-name ((,class (:foreground ,tag))))
      `(nxml-attribute-local-name ((,class (:foreground ,tag))))
      `(nxml-tag-delimiter ((,class (:foreground ,tag))))
      `(nxml-tag-slash ((,class (:foreground ,tag))))
      `(lazy-highlight ((,class (:foreground ,fg2 :background ,bg3))))
      `(term ((,class (:foreground ,fg1 :background ,bg1))))
      `(term-color-black ((,class (:foreground ,bg3 :background ,bg1))))
      `(term-color-blue ((,class (:foreground "#6d97c5" :background ,bg1))))
      `(term-color-red ((,class (:foreground ,error :background ,bg1))))
      `(term-color-green ((,class (:foreground ,info :background ,bg1))))
      `(term-color-yellow ((,class (:foreground "#638ea6" :background ,bg1))))
      `(term-color-magenta ((,class (:foreground "#646496" :background ,bg1))))
      `(term-color-cyan ((,class (:foreground ,success :background ,bg1))))
      `(term-color-white ((,class (:foreground ,fg1 :background ,bg1))))
      `(rainbow-delimiters-unmatched-face ((,class :foreground ,error)))
      `(helm-header ((,class (:foreground ,fg2 :background ,bg1 :underline nil :box nil))))
      `(helm-source-header ((,class (:foreground ,keyword :background ,bg1 :underline nil :weight bold))))
      `(helm-match ((,class (:foreground ,success :underline nil))))
      `(helm-selection ((,class (:background ,bg2 :underline nil))))
      `(helm-selection-line ((,class (:background ,bg2))))
      `(helm-visible-mark ((,class (:foreground ,fg1 :background ,match))))
      `(helm-candidate-number ((,class (:foreground ,bg1 :background ,fg1))))
      `(helm-separator ((,class (:foreground ,type :background ,bg1))))
      `(helm-time-zone-current ((,class (:foreground ,builtin :background ,bg1))))
      `(helm-time-zone-home ((,class (:foreground ,type :background ,bg1))))
      `(helm-buffer-file ((,class (:foreground ,fg1 :background ,bg1))))
      `(helm-buffer-directory ((,class (:foreground ,builtin :background ,bg1))))
      `(helm-buffer-not-saved ((,class (:foreground ,builtin :background ,bg1))))
      `(helm-buffer-process ((,class (:foreground ,builtin :background ,bg1))))
      `(helm-buffer-saved-out ((,class (:foreground ,fg1 :background ,bg1))))
      `(helm-buffer-size ((,class (:foreground ,builtin :background ,bg1))))
      `(helm-ff-directory ((,class (:foreground ,builtin :background ,bg1 :weight bold))))
      `(helm-ff-file ((,class (:foreground ,fg1 :background ,bg1 :weight normal))))
      `(helm-ff-executable ((,class (:foreground ,info :background ,bg1 :weight normal))))
      `(helm-ff-invalid-symlink ((,class (:foreground ,warning :background ,bg1 :weight bold))))
      `(helm-ff-symlink ((,class (:foreground ,keyword :background ,bg1 :weight bold))))
      `(helm-ff-prefix ((,class (:foreground ,bg1 :background ,keyword :weight normal))))
      `(helm-grep-cmd-line ((,class (:foreground ,fg1 :background ,bg1))))
      `(helm-grep-file ((,class (:foreground ,fg1 :background ,bg1))))
      `(helm-grep-finish ((,class (:foreground ,fg2 :background ,bg1))))
      `(helm-grep-lineno ((,class (:foreground ,fg1 :background ,bg1))))
      `(helm-grep-match ((,class (:foreground nil :background nil :inherit helm-match))))
      `(helm-grep-running ((,class (:foreground ,func :background ,bg1))))
      `(helm-moccur-buffer ((,class (:foreground ,func :background ,bg1))))
      `(helm-source-go-package-godoc-description ((,class (:foreground ,str))))
      `(helm-bookmark-w3m ((,class (:foreground ,type))))
      `(company-echo-common ((,class (:foreground ,bg1 :background ,fg1))))
      `(company-preview ((,class (:background ,bg1 :foreground ,var))))
      `(company-preview-common ((,class (:foreground ,bg2 :foreground ,fg3))))
      `(company-preview-search ((,class (:foreground ,type :background ,bg1))))
      `(company-scrollbar-bg ((,class (:background ,tooltip))))
      `(company-scrollbar-fg ((,class (:background ,bg4))))
      `(company-tooltip ((,class (:foreground ,fg2 :background ,tooltip :bold nil))))
      `(company-tooltip-annotation ((,class (:foreground ,type))))
      `(company-tooltip-annotation-selection ((,class (:foreground ,type))))
      `(company-tooltip-common ((,class ( :foreground ,fg3))))
      `(company-tooltip-common-selection ((,class (:foreground ,success))))
      `(company-tooltip-mouse ((,class (:inherit highlight))))
      `(company-tooltip-selection ((,class (:foreground ,fg1 :background ,bg3))))
      `(company-template-fist-eld ((,class (:inherit region))))
      `(flycheck-error ((,class (:underline ,error))))
      `(flycheck-warning ((,class (:underline ,warning))))
      `(flycheck-info ((,class (:underline ,info))))
      `(flycheck-error-list-highlight ((,class (:foreground ,fg5 :background ,error2))))
      `(anzu-replace-to ((,class (:foreground ,warning))))
      `(web-mode-builtin-face ((,class (:foregrund ,fg1))))
      `(web-mode-comment-face ((,class (:inherit ,font-lock-comment-face))))
      `(web-mode-constant-face ((,class (:inherit ,font-lock-constant-face))))
      `(web-mode-keyword-face ((,class (:foreground ,keyword))))
      `(web-mode-doctype-face ((,class (:inherit ,font-lock-comment-face))))
      `(web-mode-function-name-face ((,class (:inherit ,font-lock-function-name-face))))
      `(web-mode-string-face ((,class (:foreground ,str))))
      `(web-mode-type-face ((,class (:inherit ,font-lock-type-face))))
      `(web-mode-html-attr-name-face ((,class (:foreground ,tag))))
      `(web-mode-html-attr-value-face ((,class (:foreground ,fg1))))
      `(web-mode-warning-face ((,class (:inherit ,font-lock-warning-face))))
      `(web-mode-html-tag-face ((,class (:foreground ,tag))))
      `(web-mode-block-delimiter-face ((,class (:foreground ,fg1))))
      `(js2-private-function-call ((,class (:foreground ,const))))
      `(js2-jsdoc-html-tag-delimiter ((,class (:foreground ,str))))
      `(js2-jsdoc-html-tag-name ((,class (:foreground ,var))))
      `(js2-external-variable ((,class (:foreground ,type  ))))
      `(js2-function-param ((,class (:foreground ,const))))
      `(js2-jsdoc-value ((,class (:foreground ,str))))
      `(js2-private-member ((,class (:foreground ,fg3))))
      `(js2-error ((,class (:underline ,error))))
      `(js2-warning ((,class (:underline ,warning))))
      `(js2-private-member ((,class (:foreground ,fg1))))
      `(js2-instance-member ((,class (:foreground ,fg1))))
      `(js3-warning-face ((,class (:underline ,warning))))
      `(js3-error-face ((,class (:underline ,error))))
      `(js3-external-variable-face ((,class (:foreground ,var))))
      `(js3-function-param-face ((,class (:foreground ,fg2))))
      `(js3-jsdoc-tag-face ((,class (:foreground ,keyword))))
      `(js3-instance-member-face ((,class (:foreground ,const))))
      `(jde-java-font-lock-package-face ((t (:foreground ,var))))
      `(jde-java-font-lock-public-face ((t (:foreground ,keyword))))
      `(jde-java-font-lock-private-face ((t (:foreground ,keyword))))
      `(jde-java-font-lock-constant-face ((t (:foreground ,const))))
      `(jde-java-font-lock-modifier-face ((t (:foreground ,fg2))))
      `(jde-jave-font-lock-protected-face ((t (:foreground ,keyword))))
      `(jde-java-font-lock-number-face ((t (:foreground ,var))))))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'custom-dark)
